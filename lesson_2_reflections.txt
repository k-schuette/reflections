What happens when you initialize a repository? Why do you
need to do it?
Initializing a repository tells git that there is a
project you're going to start tracking. It needs to be
done in order to create the space for the project.

How is the staging area different from the working
directory and the repository? What value do you think
it offers?
The staging area is an in-between step between the
working directory and the repository. The value is
that it allows an area to check that you are doing
what you intend to do before creating a commit.

How can you use the staging area to make sure you have
one commit per logical change?
Since the staging area shows what is lined up to be
committed, it allows the user to decide whether the
changes go together and if so, how.

What are some situations when branches would be helpful in
keeping your history organized? How would branches help?
Even in the limited experience I've had with programming,
there have been times that I want to try doing something
with completely different logic or function to solve the
same problem. Sometimes I've had to go back and forth
between two different structures or ideas before solving.
So in this example that I have experienced, it would be
helpful to have that record of two different thought
processes so I don't completely lose any progress.

How do the diagrams help you visualize the branch structure?
The diagrams help me understand how reachability works
and provide further context to what "detached head state"
could entail without creating a new branch.

What is the result of merging two branches together? Why do
we represent it in the diagram the way we do?
Merging two branches results in one branch that keeps all
the previous commits in the history. The log from that point
forward will show the commits from the two branches
interleaved in order according to timestamp. The diagram
shows how two streams are now combined into one point.

What are the pros and cons of Git's automatic merging
vs. always doing merges manually?
Pros of automatic merging: Computer can more accurately
compare files and catch every little change.
Cons of automatic merging: If two files have significant
changes, it is impossible for the computer to figure out
the purpose and what makes sense to keep or discard.
Pros of manual merge: A human has an overall understanding
of what the program is trying to accomplish so can
decide on what makes sense to keep or discard.
Cons of manual merge: A human will not be able to catch
every little change, for example if the changes are things
like missed brackets or semi-colons. This means bugs
could stay in the program instead of being fixed.
